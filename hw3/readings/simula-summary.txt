    Simula 67 (67 for 1967, that old!) is considered as the first 'object-oriented language'. What better to reflect at, when object-oriented has become the staple food in programming languages from the last decade. Simula 67 was a programming language that used ALGOL as its base and is constructed on it.
	The language creators felt the need to simulate problems occurring in the day-to-day world. Hence the name, 'simula'! How to effectively simulate the real world scenario. The obvious way would be to mirror it in the program so that the program simulation becomes self-explanatory. For those concerns, Simula first stresses on decomposing the problem at hand into natural ,easily conceived components. At the same time, as it more or less uses the language as to what is being simulated, it becomes understandable by the common programmer and does not need a math guru to grasp it. Widening the area of use of a programming language and making it accessible to the common people was one of the aims of Simula.
	Going into the nitty-gritties of the language, Simula specifies 'block' instance which are dynamic in nature.
	The object oriented jargon that we simply use today, viz. class, object list processing, virtual keywords were all introduced in the Simula specification. It also brought into forefront the need of references and also predicted 'garbage collection' if the object is not referenced anymore. Garbage collection is one of the major part in Java and JVM based languages. We can safely say that Java is one of the most commonly used OO languages used nowadays and all the above terms are still used today. Simula opened up relations between clases by introducing 'subclasses' & 'inner classes' and concretely specifying the relation semantics between them. it organized input and output to "standardized input and output". Also list processing was introduced by SIMSET which a circular 2-way list. The system procedures and utility procedures like 'histo' were innovative.
		In all, it was interesting read. It is always better to know where one's roots are, and by this programming language specification we came to know the origin of the jargon we use in programming and deal with it as if it was always there. Also, it is nice to see how much object oriented programming languages have evolved from this early specification. 