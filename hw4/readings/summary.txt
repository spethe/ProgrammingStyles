                                Review: Essence of Functional Programming

    This paper explores the paradigm of functional programming in a different way. To get a handle on the intricacies of functional programming, the author uses a term called 'monad', by which the purity of the program being functional or not is discussed. Pure functional programming offers the power of lazy evaluation and simplicity of reasoning through mathematical equation-like constructs. In other words, pure functional programming must not have any kind of side effects. The use of a language or a language paradigm heavily depends on the ease with which the program can be modified.
    Monads are used as supposedly they increase the modularity and in turn simplify change in program. Monads can be thought of as a computational encapsulation following some set of rules or some grammar. Monads are the solution in functional programming to simulate side effects gracefully, as, without side effects the programs may render as useless even if it is ideally pure functional. Typically, A monad consists of 3 parts viz. A type constructor, and a pair of polymorphic functions. These polymorphic functions are generally 'unit' function and 'bind' function. By modifying these 3 constituents, a monad can be given different roles and hence can be used for a variety of functionalities.
    The author explores different variations in monads by changing the definitions of the constituent parts of a monad, in turn changing the interpreter. To start, The Identity monad is explained and then an error/exception monad is evolved. The point to note is that this particular monad modification can be used to signal an error the functional way. Then comes the 'state transformer' monad which forces the interpreter to keep count of the number of reductions occurring on state. The 'bind' fucntion of the state transformer takes an intitial state and returns a value paired with the new state. The 'output' monad variation deals with the side effect of showing the result the functional way. Another useful monad, is the list monad or the non-deterministic monad; It is used when a non-deterministic language returns a list of possible answers.
    The author then compares the 'continuation passing style' to monads, and discuss the interchangeability between them. The subtle difference between CPS and monads is that the monad type can return an abstract data type providing finer control. Haskell compiler uses monads extensively in most of its compiler phases.
    In all, this paper put into focus monads as an important tool in functional programming which we can use to give structure to the programs and make the code modular.