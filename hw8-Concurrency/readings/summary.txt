
Review: Linda 

	There has been extensive development in distributed systems as hardware costs lowered. It is preferable cost-wise to have numerous cheap machines doing the computation than one single super computer. Hence, it gave way to extensive research in parallel algorithms and parallelizing data. This naturally boiled down to programming styles benefitting concurrency. Linda, is one such framework that aids in construction of explicitly parallel programs.
Parallel programs need to be machine independent, be able to communicate between processors, be dynamically distributed at runtime and so on. Linda attempts to aid in these requirements. One of the interesting feature of Linda is its memory model. The memory storage unit is a ‘logical tuple’ and the memory space of these tuples is called as the ‘tuple space’. A logical tuple can be identified by its logical name and not it’s address. Messages in Linda are never exchanged/passed between 2 parallel processes. Instead a process publishes data to the tuple space which is accessed by another process requiring it. This requires structural naming which makes the tuple space content-addressable and easy to use. Linda allows four major operations in this tuple space viz. out, in, read and eval. The data in this tuple space can be manipulated by distributed processes by using the above mentioned operations. Programming in Linda becomes streamlined as they it provides a 'manager-process' which services a request at a time and the data in tuple space is directly made available to the parallel processes.
    Linda can be regarded as the interpreter language for high level symmetric languages as they can be directly converted to Linda to run on Linda systems.Parallel systems can become powerful and easy to use by using Linda on top of them. It can be thought of as a programming model middleware with ‘role’ semantics.
