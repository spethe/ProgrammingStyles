Review: An Unsolvable problem of elementary number theory

	This paper by 19th century mathematician Alonzo Church proved to be an important work as far as theoretical computer science is concerned. Theory of computer science is regarded to have its roots in this work and Turing’s hypothesis.
	In this paper, Church postulated the concept of an effectively calculable function of say, n positive numbers which stems from the elementary number theory. According to the paper, the main purpose of the paper was to define an effectively calculable function and show that not every problem of this class is solvable. Church, then formalizes the hypothesis by defining some terms necessary for the definition. Concepts like free & bound variables, well-defined formulae, normal form of the formula and the possibility of conversion between formulae is explained.
	The definition of a well- formed formula is mentioned. Also, a formula is in the normal form if no reduction of the formula is possible. Lambda- definable functions are introduced further. Church also associates Gödel’s representation to formulas, which is nothing but a positive integer association that deems well-formed formulas as distinct. So, No two distinct well-formed formulae can have the same Gödel representation and vice versa. It logically follows to the concept of recursive functions and associated proofs which form a chunk of modern day lambda calculus.
	This paper along with the earlier paper by Turing form the theory of computer science. The findings and proofs in this paper have had large significance in the shaping of a parallel branch in computer science - that of functional programming. Lambda calculus was first instantiated in LISP. Lisp was one of the earliest programming languages which is still shapes the design of some programming languages. Modern day functional programming languages like Clojure and Scala borrow heavily from LISP and hence form Lambda calculus. It brings along the idea of pure functions which are more mathematical in nature but can be useful in programming.
It makes the line between ‘formulae’ and ‘functions’ as in programming languages a little bit hazy.
At last, nowadays, functional programming is many a times preferred over object oriented programming and is used wherever possible. 
