REST APIs by Roy Fieldings

	REST, short for Representational State Transfer is an architectural style proposed by Dr. Roy Fieldings in his doctoral dissertation. It is an architectural style proposed to develop interactive, network applications which are supposed to be long lived and spanning multiple organizations.
	In this article, Dr. Roy Fieldings has tried to make his point clear on what applications follow the RESTful style and which don’t.  One of the major points which makes a network based application RESTful is that the API or the application engine must be driven by hypertext. After the initial base URI i.e. the server url, all application state transitions must be driven by client selection of server provided choices that are presented in received representations. This also indicates that a typical REST application on HTTP must follow the standard HTTP protocols like GET, POST, PUT, DELETE, OPTIONS. In addition, this also instructs APIs that they must not contain any changes to the communication protocols.
Also, in the REST style, all addressable resources should have a unique identifier, viz. URI. Also, there should be flexibility in the design of URI scheme and the application should work as long as the client follows the proposed URI scheme. Having said that, servers must have the freedom to control their own namespaces. This warrants that servers must instruct clients on how to construct appropriate URIs. REST ensures that need for apriori knowledge for the client is put up as readily standardizable forms as it is far easier to standardize objects and object-specific interfaces.
Many of the constraints specified by REST are directly opposed to short-term efficiency, hence, the author reiterates that REST must be used long-lived, easy to maintain network-based solutions. Lastly, one of the fundamental principles of the REST architectures is separation of concerns, hence encoding knowledge within clients/servers of the other sides’ implementation mechanism should be avoided.
